/************ Update: Schemas ***************/

COMMENT ON SCHEMA public IS NULL;



/************ Add: Sequences ***************/

CREATE SEQUENCE alistamiento_reparacion_id_seq INCREMENT BY 1;
COMMENT ON SEQUENCE alistamiento_reparacion_id_seq IS 'DbWrench Autogenerated Sequence.';

CREATE SEQUENCE ambiente_historial_lote_id_seq INCREMENT BY 1;
COMMENT ON SEQUENCE ambiente_historial_lote_id_seq IS 'DbWrench Autogenerated Sequence.';

CREATE SEQUENCE ambiente_id_seq INCREMENT BY 1;
COMMENT ON SEQUENCE ambiente_id_seq IS 'DbWrench Autogenerated Sequence.';

CREATE SEQUENCE ambiente_insumo_id_seq INCREMENT BY 1;
COMMENT ON SEQUENCE ambiente_insumo_id_seq IS 'DbWrench Autogenerated Sequence.';

CREATE SEQUENCE bitacora_id_seq INCREMENT BY 1;
COMMENT ON SEQUENCE bitacora_id_seq IS 'DbWrench Autogenerated Sequence.';

CREATE SEQUENCE bodega_clasificacion_id_seq INCREMENT BY 1;
COMMENT ON SEQUENCE bodega_clasificacion_id_seq IS 'DbWrench Autogenerated Sequence.';

CREATE SEQUENCE bodega_id_seq INCREMENT BY 1;
COMMENT ON SEQUENCE bodega_id_seq IS 'DbWrench Autogenerated Sequence.';

CREATE SEQUENCE cajon_compostaje_id_seq INCREMENT BY 1;
COMMENT ON SEQUENCE cajon_compostaje_id_seq IS 'DbWrench Autogenerated Sequence.';

CREATE SEQUENCE cargo_id_seq INCREMENT BY 1;
COMMENT ON SEQUENCE cargo_id_seq IS 'DbWrench Autogenerated Sequence.';

CREATE SEQUENCE clasificacion_postura_id_seq INCREMENT BY 1;
COMMENT ON SEQUENCE clasificacion_postura_id_seq IS 'DbWrench Autogenerated Sequence.';

CREATE SEQUENCE control_alimento_id_seq INCREMENT BY 1;
COMMENT ON SEQUENCE control_alimento_id_seq IS 'DbWrench Autogenerated Sequence.';

CREATE SEQUENCE control_compostaje_id_seq INCREMENT BY 1;
COMMENT ON SEQUENCE control_compostaje_id_seq IS 'DbWrench Autogenerated Sequence.';

CREATE SEQUENCE control_cucarron_id_seq INCREMENT BY 1;
COMMENT ON SEQUENCE control_cucarron_id_seq IS 'DbWrench Autogenerated Sequence.';

CREATE SEQUENCE control_roedores_id_seq INCREMENT BY 1;
COMMENT ON SEQUENCE control_roedores_id_seq IS 'DbWrench Autogenerated Sequence.';

CREATE SEQUENCE credencial_id_seq INCREMENT BY 1;
COMMENT ON SEQUENCE credencial_id_seq IS 'DbWrench Autogenerated Sequence.';

CREATE SEQUENCE detalle_mantenimiento_id_seq INCREMENT BY 1;
COMMENT ON SEQUENCE detalle_mantenimiento_id_seq IS 'DbWrench Autogenerated Sequence.';

CREATE SEQUENCE devolucion_incubadora_id_seq INCREMENT BY 1;
COMMENT ON SEQUENCE devolucion_incubadora_id_seq IS 'DbWrench Autogenerated Sequence.';

CREATE SEQUENCE empleado_id_seq INCREMENT BY 1;
COMMENT ON SEQUENCE empleado_id_seq IS 'DbWrench Autogenerated Sequence.';

CREATE SEQUENCE forma_aplicacion_id_seq INCREMENT BY 1;
COMMENT ON SEQUENCE forma_aplicacion_id_seq IS 'DbWrench Autogenerated Sequence.';

CREATE SEQUENCE incubadora_id_seq INCREMENT BY 1;
COMMENT ON SEQUENCE incubadora_id_seq IS 'DbWrench Autogenerated Sequence.';

CREATE SEQUENCE localizacion_id_seq INCREMENT BY 1;
COMMENT ON SEQUENCE localizacion_id_seq IS 'DbWrench Autogenerated Sequence.';

CREATE SEQUENCE lote_id_seq INCREMENT BY 1;
COMMENT ON SEQUENCE lote_id_seq IS 'DbWrench Autogenerated Sequence.';

CREATE SEQUENCE mantenimiento_id_seq INCREMENT BY 1;
COMMENT ON SEQUENCE mantenimiento_id_seq IS 'DbWrench Autogenerated Sequence.';

CREATE SEQUENCE maquina_id_seq INCREMENT BY 1;
COMMENT ON SEQUENCE maquina_id_seq IS 'DbWrench Autogenerated Sequence.';

CREATE SEQUENCE postura_detalle_id_seq INCREMENT BY 1;
COMMENT ON SEQUENCE postura_detalle_id_seq IS 'DbWrench Autogenerated Sequence.';

CREATE SEQUENCE postura_id_seq INCREMENT BY 1;
COMMENT ON SEQUENCE postura_id_seq IS 'DbWrench Autogenerated Sequence.';

CREATE SEQUENCE presentacion_id_seq INCREMENT BY 1;
COMMENT ON SEQUENCE presentacion_id_seq IS 'DbWrench Autogenerated Sequence.';

CREATE SEQUENCE raza_id_seq INCREMENT BY 1;
COMMENT ON SEQUENCE raza_id_seq IS 'DbWrench Autogenerated Sequence.';

CREATE SEQUENCE razon_salida_id_seq INCREMENT BY 1;
COMMENT ON SEQUENCE razon_salida_id_seq IS 'DbWrench Autogenerated Sequence.';

CREATE SEQUENCE recordar_me_id_seq INCREMENT BY 1;
COMMENT ON SEQUENCE recordar_me_id_seq IS 'DbWrench Autogenerated Sequence.';

CREATE SEQUENCE registro_alistamiento_detalle_desinfeccion_id_seq INCREMENT BY 1;
COMMENT ON SEQUENCE registro_alistamiento_detalle_desinfeccion_id_seq IS 'DbWrench Autogenerated Sequence.';

CREATE SEQUENCE registro_alistamiento_id_seq INCREMENT BY 1;
COMMENT ON SEQUENCE registro_alistamiento_id_seq IS 'DbWrench Autogenerated Sequence.';

CREATE SEQUENCE registro_desinfeccion_detalle_id_seq INCREMENT BY 1;
COMMENT ON SEQUENCE registro_desinfeccion_detalle_id_seq IS 'DbWrench Autogenerated Sequence.';

CREATE SEQUENCE registro_desinfeccion_id_seq INCREMENT BY 1;
COMMENT ON SEQUENCE registro_desinfeccion_id_seq IS 'DbWrench Autogenerated Sequence.';

CREATE SEQUENCE requisicion_detalle_id_seq INCREMENT BY 1;
COMMENT ON SEQUENCE requisicion_detalle_id_seq IS 'DbWrench Autogenerated Sequence.';

CREATE SEQUENCE requisicion_id_seq INCREMENT BY 1;
COMMENT ON SEQUENCE requisicion_id_seq IS 'DbWrench Autogenerated Sequence.';

CREATE SEQUENCE salida_detalle_incubadora_id_seq INCREMENT BY 1;
COMMENT ON SEQUENCE salida_detalle_incubadora_id_seq IS 'DbWrench Autogenerated Sequence.';

CREATE SEQUENCE salida_detalle_postura_id_seq INCREMENT BY 1;
COMMENT ON SEQUENCE salida_detalle_postura_id_seq IS 'DbWrench Autogenerated Sequence.';

CREATE SEQUENCE salida_incubadora_id_seq INCREMENT BY 1;
COMMENT ON SEQUENCE salida_incubadora_id_seq IS 'DbWrench Autogenerated Sequence.';

CREATE SEQUENCE salida_insumo_detalle_id_seq INCREMENT BY 1;
COMMENT ON SEQUENCE salida_insumo_detalle_id_seq IS 'DbWrench Autogenerated Sequence.';

CREATE SEQUENCE salida_insumo_id_seq INCREMENT BY 1;
COMMENT ON SEQUENCE salida_insumo_id_seq IS 'DbWrench Autogenerated Sequence.';

CREATE SEQUENCE salida_lote_id_seq INCREMENT BY 1;
COMMENT ON SEQUENCE salida_lote_id_seq IS 'DbWrench Autogenerated Sequence.';

CREATE SEQUENCE tipo_ambiente_id_seq INCREMENT BY 1;
COMMENT ON SEQUENCE tipo_ambiente_id_seq IS 'DbWrench Autogenerated Sequence.';

CREATE SEQUENCE tipo_desinfeccion_id_seq INCREMENT BY 1;
COMMENT ON SEQUENCE tipo_desinfeccion_id_seq IS 'DbWrench Autogenerated Sequence.';

CREATE SEQUENCE tipo_empaque_id_seq INCREMENT BY 1;
COMMENT ON SEQUENCE tipo_empaque_id_seq IS 'DbWrench Autogenerated Sequence.';

CREATE SEQUENCE tipo_identificacion_id_seq INCREMENT BY 1;
COMMENT ON SEQUENCE tipo_identificacion_id_seq IS 'DbWrench Autogenerated Sequence.';

CREATE SEQUENCE tipo_insumo_id_seq INCREMENT BY 1;
COMMENT ON SEQUENCE tipo_insumo_id_seq IS 'DbWrench Autogenerated Sequence.';

CREATE SEQUENCE tipo_mantenimiento_id_seq INCREMENT BY 1;
COMMENT ON SEQUENCE tipo_mantenimiento_id_seq IS 'DbWrench Autogenerated Sequence.';

CREATE SEQUENCE tipo_reparacion_id_seq INCREMENT BY 1;
COMMENT ON SEQUENCE tipo_reparacion_id_seq IS 'DbWrench Autogenerated Sequence.';

CREATE SEQUENCE transportador_id_seq INCREMENT BY 1;
COMMENT ON SEQUENCE transportador_id_seq IS 'DbWrench Autogenerated Sequence.';

CREATE SEQUENCE unidad_medida_id_seq INCREMENT BY 1;
COMMENT ON SEQUENCE unidad_medida_id_seq IS 'DbWrench Autogenerated Sequence.';

CREATE SEQUENCE usuario_id_seq INCREMENT BY 1;
COMMENT ON SEQUENCE usuario_id_seq IS 'DbWrench Autogenerated Sequence.';



/************ Update: Tables ***************/

/******************** Add Table: alistamiento_reparacion ************************/

/* Build Table Structure */
CREATE TABLE alistamiento_reparacion
(
	id INTEGER DEFAULT nextval('alistamiento_reparacion_id_seq'::regclass) NOT NULL,
	registro_alistamiento_id INTEGER NOT NULL,
	tipo_reparacion_id INTEGER NOT NULL,
	fecha_inicio TIMESTAMP NOT NULL,
	fecha_fin TIMESTAMP NOT NULL,
	deleted_at TIMESTAMP NULL
);

/* Add Primary Key */
ALTER TABLE alistamiento_reparacion ADD CONSTRAINT pkalistamiento_reparacion
	PRIMARY KEY (id);


/******************** Add Table: ambiente ************************/

/* Build Table Structure */
CREATE TABLE ambiente
(
	id INTEGER DEFAULT nextval('ambiente_id_seq'::regclass) NOT NULL,
	nombre VARCHAR(80) NOT NULL,
	observacion VARCHAR(1024) NULL,
	tipo_ambiente_id INTEGER NOT NULL,
	deleted_at TIMESTAMP NULL
);

/* Add Primary Key */
ALTER TABLE ambiente ADD CONSTRAINT pkambiente
	PRIMARY KEY (id);


/******************** Add Table: ambiente_historial_lote ************************/

/* Build Table Structure */
CREATE TABLE ambiente_historial_lote
(
	id INTEGER DEFAULT nextval('ambiente_historial_lote_id_seq'::regclass) NOT NULL,
	ambiente_id INTEGER NOT NULL,
	lote_id INTEGER NOT NULL,
	no_caseta INTEGER NOT NULL,
	cantidad_hembras INTEGER DEFAULT 0 NOT NULL,
	cantidad_machos INTEGER DEFAULT 0 NOT NULL,
	deleted_at TIMESTAMP NULL
);

/* Add Primary Key */
ALTER TABLE ambiente_historial_lote ADD CONSTRAINT pkambiente_historial_lote
	PRIMARY KEY (id);

/* Add Indexes */
CREATE UNIQUE INDEX "ambiente_historial_lote_ambiente_id_lote_id_no_caseta_Idx" ON ambiente_historial_lote USING btree (ambiente_id, lote_id, no_caseta);


/******************** Add Table: ambiente_insumo ************************/

/* Build Table Structure */
CREATE TABLE ambiente_insumo
(
	id INTEGER DEFAULT nextval('ambiente_insumo_id_seq'::regclass) NOT NULL,
	ambiente_id INTEGER NOT NULL,
	salida_insumo_detalle_id INTEGER NOT NULL,
	fecha_asignacion TIMESTAMP NOT NULL,
	fecha_retiro TIMESTAMP NULL,
	deleted_at TIMESTAMP NULL
);

/* Add Primary Key */
ALTER TABLE ambiente_insumo ADD CONSTRAINT pkambiente_insumo
	PRIMARY KEY (id);


/******************** Add Table: bitacora ************************/

/* Build Table Structure */
CREATE TABLE bitacora
(
	id INTEGER DEFAULT nextval('bitacora_id_seq'::regclass) NOT NULL,
	accion VARCHAR(80) NOT NULL,
	usuario_id INTEGER NOT NULL,
	observacion VARCHAR(1024) NULL,
	fecha TIMESTAMP DEFAULT now() NOT NULL,
	tabla VARCHAR(80) NOT NULL,
	registro BIGINT NOT NULL,
	deleted_at TIMESTAMP NULL
);

/* Add Primary Key */
ALTER TABLE bitacora ADD CONSTRAINT pkbitacora
	PRIMARY KEY (id);

/* Add Comments */
COMMENT ON COLUMN bitacora.accion IS 'Anular, Eliminar, Imprimir, Registrar, Modificar, entre otros';

/* Add Indexes */
CREATE INDEX "bitacora_accion_Idx" ON bitacora USING btree (accion);

CREATE INDEX "bitacora_usuario_id_Idx" ON bitacora USING btree (usuario_id);


/******************** Add Table: bodega ************************/

/* Build Table Structure */
CREATE TABLE bodega
(
	id INTEGER DEFAULT nextval('bodega_id_seq'::regclass) NOT NULL,
	lote_id INTEGER NULL,
	bodega_clasificacion_id INTEGER NOT NULL,
	insumo_id INTEGER NOT NULL,
	entrada_bodega_id INTEGER NOT NULL,
	fecha_vencimiento TIMESTAMP NULL,
	cantidad INTEGER NOT NULL,
	activo BOOL DEFAULT 't' NOT NULL,
	deleted_at TIMESTAMP NULL
);

/* Add Primary Key */
ALTER TABLE bodega ADD CONSTRAINT pkbodega
	PRIMARY KEY (id);

/* Add Comments */
COMMENT ON COLUMN bodega.activo IS 'true = activo o false = inactivo';


/******************** Add Table: bodega_clasificacion ************************/

/* Build Table Structure */
CREATE TABLE bodega_clasificacion
(
	id INTEGER DEFAULT nextval('bodega_clasificacion_id_seq'::regclass) NOT NULL,
	nombre VARCHAR(50) NOT NULL,
	activo BOOL DEFAULT 't' NOT NULL,
	deleted_at TIMESTAMP NULL
);

/* Add Primary Key */
ALTER TABLE bodega_clasificacion ADD CONSTRAINT pkbodega_clasificacion
	PRIMARY KEY (id);


/******************** Add Table: cajon_compostaje ************************/

/* Build Table Structure */
CREATE TABLE cajon_compostaje
(
	id INTEGER DEFAULT nextval('cajon_compostaje_id_seq'::regclass) NOT NULL,
	numero INTEGER NOT NULL,
	observacion VARCHAR(1024) NULL,
	deleted_at TIMESTAMP NULL
);

/* Add Primary Key */
ALTER TABLE cajon_compostaje ADD CONSTRAINT pkcajon_compostaje
	PRIMARY KEY (id);


/******************** Add Table: cargo ************************/

/* Build Table Structure */
CREATE TABLE cargo
(
	id INTEGER DEFAULT nextval('cargo_id_seq'::regclass) NOT NULL,
	nombre VARCHAR(50) NOT NULL,
	descripcion VARCHAR(200) NULL,
	deleted_at TIMESTAMP NULL
);

/* Add Primary Key */
ALTER TABLE cargo ADD CONSTRAINT pkcargo
	PRIMARY KEY (id);


/******************** Add Table: clasificacion_postura ************************/

/* Build Table Structure */
CREATE TABLE clasificacion_postura
(
	id INTEGER DEFAULT nextval('clasificacion_postura_id_seq'::regclass) NOT NULL,
	nombre VARCHAR(80) NOT NULL,
	descripcion VARCHAR(1024) NOT NULL,
	observacion VARCHAR(1024) NULL,
	deleted_at TIMESTAMP NULL,
	clasificacion_postura_id INTEGER NULL
);

/* Add Primary Key */
ALTER TABLE clasificacion_postura ADD CONSTRAINT pkclasificacion_postura
	PRIMARY KEY (id);


/******************** Add Table: control_alimento ************************/

/* Build Table Structure */
CREATE TABLE control_alimento
(
	id INTEGER DEFAULT nextval('control_alimento_id_seq'::regclass) NOT NULL,
	ambiente_historial_lote_id INTEGER NOT NULL,
	salida_insumo_detalle_id INTEGER NOT NULL,
	id_empleado INTEGER NOT NULL,
	sexo BOOL NOT NULL,
	cantidad INTEGER NOT NULL,
	fecha TIMESTAMP NOT NULL,
	semana INTEGER NOT NULL,
	observacion VARCHAR(1024) NULL,
	deleted_at TIMESTAMP NULL
);

/* Add Primary Key */
ALTER TABLE control_alimento ADD CONSTRAINT pkcontrol_alimento
	PRIMARY KEY (id);

/* Add Comments */
COMMENT ON COLUMN control_alimento.sexo IS 'true = machos | false = hembras';


/******************** Add Table: control_compostaje ************************/

/* Build Table Structure */
CREATE TABLE control_compostaje
(
	id INTEGER DEFAULT nextval('control_compostaje_id_seq'::regclass) NOT NULL,
	empleado_id_administrador INTEGER NOT NULL,
	empleado_id_veterinario INTEGER NOT NULL,
	empleado_id_responsable INTEGER NOT NULL,
	fecha_realizacion TIMESTAMP NOT NULL,
	cajon_compostaje_id INTEGER NOT NULL,
	gallinaza_utilizada INTEGER DEFAULT 0 NOT NULL,
	cantidad_total INTEGER DEFAULT 0 NOT NULL,
	cantidad_machos INTEGER DEFAULT 0 NOT NULL,
	cantidad_hembras INTEGER DEFAULT 0 NOT NULL,
	salida_lote_id INTEGER NOT NULL,
	observacion VARCHAR(1024) NULL,
	deleted_at TIMESTAMP NULL
);

/* Add Primary Key */
ALTER TABLE control_compostaje ADD CONSTRAINT pkcontrol_compostaje
	PRIMARY KEY (id);

/* Add Comments */
COMMENT ON COLUMN control_compostaje.gallinaza_utilizada IS 'Cantidad de bultos utilizados';


/******************** Add Table: control_cucarron ************************/

/* Build Table Structure */
CREATE TABLE control_cucarron
(
	id INTEGER DEFAULT nextval('control_cucarron_id_seq'::regclass) NOT NULL,
	empleado_id_administrador INTEGER NOT NULL,
	empleado_id_veterianario INTEGER NOT NULL,
	empleado_id_responsable INTEGER NOT NULL,
	fecha_realizacion TIMESTAMP NOT NULL,
	salida_insumo_detalle_id INTEGER NOT NULL,
	solucion VARCHAR(1024) NOT NULL,
	forma_aplicacion_id INTEGER NOT NULL,
	area_tratada INTEGER NOT NULL,
	observacion VARCHAR(1024) NULL,
	deleted_at TIMESTAMP NULL
);

/* Add Primary Key */
ALTER TABLE control_cucarron ADD CONSTRAINT pkcontrol_cucarron
	PRIMARY KEY (id);

/* Add Comments */
COMMENT ON COLUMN control_cucarron.solucion IS 'Cantidad del producto usado y en qué se disuelve';

COMMENT ON COLUMN control_cucarron.area_tratada IS 'Área tratada en metros cuadrados';


/******************** Add Table: control_roedores ************************/

/* Build Table Structure */
CREATE TABLE control_roedores
(
	id INTEGER DEFAULT nextval('control_roedores_id_seq'::regclass) NOT NULL,
	empleado_id_administrador INTEGER NOT NULL,
	empleado_id_veterinario INTEGER NOT NULL,
	empleado_id_responsable INTEGER NOT NULL,
	fecha_realizacion TIMESTAMP NOT NULL,
	salida_insumo_detalle_id INTEGER NOT NULL,
	pellets INTEGER DEFAULT 0 NOT NULL,
	bloques INTEGER DEFAULT 0 NOT NULL,
	evidencia_consumo BOOL DEFAULT 'false' NOT NULL,
	lugar VARCHAR(1024) NOT NULL,
	observacion VARCHAR(1024) NULL,
	deleted_at TIMESTAMP NULL
);

/* Add Primary Key */
ALTER TABLE control_roedores ADD CONSTRAINT pkcontrol_roedores
	PRIMARY KEY (id);

/* Add Comments */
COMMENT ON COLUMN control_roedores.pellets IS 'Cantidad en gramos (gr)';

COMMENT ON COLUMN control_roedores.bloques IS 'Cantidad en gramos (gr)';

COMMENT ON COLUMN control_roedores.evidencia_consumo IS 'true = consumio | false = no consumio';


/******************** Add Table: credencial ************************/

/* Build Table Structure */
CREATE TABLE credencial
(
	id INTEGER DEFAULT nextval('credencial_id_seq'::regclass) NOT NULL,
	nombre VARCHAR(20) NOT NULL,
	created_at TIMESTAMP NOT NULL,
	updated_at TIMESTAMP NULL,
	deleted_at TIMESTAMP NULL
);

/* Add Primary Key */
ALTER TABLE credencial ADD CONSTRAINT pkcredencial
	PRIMARY KEY (id);


/******************** Add Table: detalle_mantenimiento ************************/

/* Build Table Structure */
CREATE TABLE detalle_mantenimiento
(
	id INTEGER DEFAULT nextval('detalle_mantenimiento_id_seq'::regclass) NOT NULL,
	mantenimiento_id INTEGER NOT NULL,
	descripcion VARCHAR(1024) NOT NULL,
	valor INTEGER NOT NULL,
	observacion VARCHAR(1024) NULL,
	deleted_at TIMESTAMP NULL
);

/* Add Primary Key */
ALTER TABLE detalle_mantenimiento ADD CONSTRAINT pkdetalle_mantenimiento
	PRIMARY KEY (id);


/******************** Add Table: devolucion_incubadora ************************/

/* Build Table Structure */
CREATE TABLE devolucion_incubadora
(
	id INTEGER DEFAULT nextval('devolucion_incubadora_id_seq'::regclass) NOT NULL,
	salida_incubadora_id INTEGER NOT NULL,
	cantidad_llegada INTEGER NOT NULL,
	cantidad_faltante INTEGER NOT NULL,
	cantidad_devolucion INTEGER NOT NULL,
	fecha TIMESTAMP NOT NULL,
	empleado_id INTEGER NOT NULL,
	deleted_at TIMESTAMP NULL
);

/* Add Primary Key */
ALTER TABLE devolucion_incubadora ADD CONSTRAINT pkdevolucion_incubadora
	PRIMARY KEY (id);

/* Add Indexes */
CREATE UNIQUE INDEX "devolucion_incubadora_salida_incubadora_id_Idx" ON devolucion_incubadora USING btree (salida_incubadora_id);


/******************** Add Table: empleado ************************/

/* Build Table Structure */
CREATE TABLE empleado
(
	id INTEGER DEFAULT nextval('empleado_id_seq'::regclass) NOT NULL,
	tipo_identificacion_id INTEGER NOT NULL,
	documento BIGINT NOT NULL,
	genero CHAR(1) NOT NULL,
	nombre VARCHAR(50) NOT NULL,
	apellido VARCHAR(50) NOT NULL,
	telefono INTEGER NOT NULL,
	direccion VARCHAR(100) NOT NULL,
	correo VARCHAR(100) NOT NULL,
	cargo_id INTEGER NOT NULL,
	localizacion_id INTEGER NULL,
	activo BOOL DEFAULT 't' NOT NULL,
	usuario_id INTEGER NULL,
	deleted_at TIMESTAMP NULL
);

/* Add Primary Key */
ALTER TABLE empleado ADD CONSTRAINT pkempleado
	PRIMARY KEY (id);

/* Add Comments */
COMMENT ON COLUMN empleado.genero IS 'F = femenino y M = masculino';

COMMENT ON COLUMN empleado.activo IS 'true = activo (trabajando) y false = inactivo';

/* Add Indexes */
CREATE INDEX "empleado_id_cargo_Idx" ON empleado USING btree (cargo_id);

CREATE UNIQUE INDEX "empleado_usuario_id_Idx" ON empleado USING btree (usuario_id);


/******************** Add Table: entrada_bodega ************************/

/* Build Table Structure */
CREATE TABLE entrada_bodega
(
	id INTEGER NOT NULL,
	empleado_id INTEGER NOT NULL,
	transportador_id INTEGER NOT NULL,
	fecha_entrada TIMESTAMP NOT NULL,
	remision INTEGER NOT NULL,
	deleted_at TIMESTAMP NULL,
	observacion VARCHAR(1024) NULL
);

/* Add Primary Key */
ALTER TABLE entrada_bodega ADD CONSTRAINT pkentrada_bodega
	PRIMARY KEY (id);


/******************** Add Table: forma_aplicacion ************************/

/* Build Table Structure */
CREATE TABLE forma_aplicacion
(
	id INTEGER DEFAULT nextval('forma_aplicacion_id_seq'::regclass) NOT NULL,
	nombre VARCHAR(1024) NOT NULL,
	descripcion VARCHAR(1024) NOT NULL,
	deleted_at TIMESTAMP NULL
);

/* Add Primary Key */
ALTER TABLE forma_aplicacion ADD CONSTRAINT pkforma_aplicacion
	PRIMARY KEY (id);


/******************** Add Table: incubadora ************************/

/* Build Table Structure */
CREATE TABLE incubadora
(
	id INTEGER DEFAULT nextval('incubadora_id_seq'::regclass) NOT NULL,
	nombre VARCHAR(80) NOT NULL,
	observacion VARCHAR(1024) NULL,
	direccion VARCHAR(1024) NOT NULL,
	localizacion_id INTEGER NOT NULL,
	deleted_at TIMESTAMP NULL
);

/* Add Primary Key */
ALTER TABLE incubadora ADD CONSTRAINT pkincubadora
	PRIMARY KEY (id);


/******************** Add Table: insumo ************************/

/* Build Table Structure */
CREATE TABLE insumo
(
	id INTEGER NOT NULL,
	activo BOOL DEFAULT 't' NOT NULL,
	deleted_at TIMESTAMP NULL,
	nombre VARCHAR(200) NOT NULL,
	tipo_insumo_id INTEGER NOT NULL,
	presentacion_id INTEGER NOT NULL,
	unidad_medida_id INTEGER NOT NULL,
	inventario_bodega INTEGER DEFAULT 0 NOT NULL
);

/* Add Primary Key */
ALTER TABLE insumo ADD CONSTRAINT pkinsumo
	PRIMARY KEY (id);

/* Add Comments */
COMMENT ON COLUMN insumo.activo IS 'TRUE = activado; FALSE = no activado';


/******************** Add Table: localizacion ************************/

/* Build Table Structure */
CREATE TABLE localizacion
(
	id INTEGER DEFAULT nextval('localizacion_id_seq'::regclass) NOT NULL,
	nombre VARCHAR(50) NOT NULL,
	localizacion_id INTEGER NULL,
	deleted_at TIMESTAMP NULL
);

/* Add Primary Key */
ALTER TABLE localizacion ADD CONSTRAINT pklocalizacion
	PRIMARY KEY (id);


/******************** Add Table: lote ************************/

/* Build Table Structure */
CREATE TABLE lote
(
	id INTEGER DEFAULT nextval('lote_id_seq'::regclass) NOT NULL,
	lote INTEGER NOT NULL,
	fecha_entrada_granja TIMESTAMP NOT NULL,
	fecha_salida_estipulada TIMESTAMP NOT NULL,
	fecha_salida_real TIMESTAMP NULL,
	raza_id INTEGER NOT NULL,
	peso_promedio_machos INTEGER NOT NULL,
	peso_promedio_hembras INTEGER NOT NULL,
	cantidad_machos INTEGER NOT NULL,
	cantidad_hembras INTEGER NOT NULL,
	cantidad_total INTEGER NOT NULL,
	fecha_entra_produccion TIMESTAMP NULL,
	observacion VARCHAR(1024) NULL,
	empleado_id INTEGER NOT NULL,
	deleted_at TIMESTAMP NULL
);

/* Add Primary Key */
ALTER TABLE lote ADD CONSTRAINT pklote
	PRIMARY KEY (id);

/* Add Comments */
COMMENT ON COLUMN lote.fecha_entrada_granja IS 'fecha de entrada  la granja';

COMMENT ON COLUMN lote.fecha_entra_produccion IS 'Fecha de entrada a las ramadas';

/* Add Indexes */
CREATE UNIQUE INDEX "lote_lote_Idx" ON lote USING btree (lote);


/******************** Add Table: mantenimiento ************************/

/* Build Table Structure */
CREATE TABLE mantenimiento
(
	id INTEGER DEFAULT nextval('mantenimiento_id_seq'::regclass) NOT NULL,
	maquina_id INTEGER NOT NULL,
	empleado_id INTEGER NOT NULL,
	tipo_mantenimiento_id INTEGER NOT NULL,
	fecha_inicio TIMESTAMP NOT NULL,
	fecha_fin TIMESTAMP NULL,
	causa VARCHAR(1024) NULL,
	arreglo VARCHAR(1024) NULL,
	observacion VARCHAR(1024) NULL,
	deleted_at TIMESTAMP NULL
);

/* Add Primary Key */
ALTER TABLE mantenimiento ADD CONSTRAINT pkmantenimiento
	PRIMARY KEY (id);


/******************** Add Table: maquina ************************/

/* Build Table Structure */
CREATE TABLE maquina
(
	id INTEGER DEFAULT nextval('maquina_id_seq'::regclass) NOT NULL,
	fecha_ingreso TIMESTAMP NOT NULL,
	descripcion VARCHAR(1024) NOT NULL,
	codigo VARCHAR(20) NOT NULL,
	referencia VARCHAR(100) NOT NULL,
	fecha_mantenimiento TIMESTAMP NOT NULL,
	intervalo_mantenimiento INTEGER NOT NULL,
	activado BOOL DEFAULT 't' NOT NULL,
	valor INTEGER NOT NULL,
	deleted_at TIMESTAMP NULL
);

/* Add Primary Key */
ALTER TABLE maquina ADD CONSTRAINT pkmaquina
	PRIMARY KEY (id);

/* Add Comments */
COMMENT ON COLUMN maquina.codigo IS 'Número de chasis';

COMMENT ON COLUMN maquina.referencia IS 'Manejar los números de serie, modelo';

COMMENT ON COLUMN maquina.fecha_mantenimiento IS 'fecha del proximo mantenimiento';

COMMENT ON COLUMN maquina.intervalo_mantenimiento IS 'Número en días del intervalo de mantenimiento';

COMMENT ON COLUMN maquina.activado IS 'true = activo y false = desactivado';

COMMENT ON COLUMN maquina.valor IS 'Valor de la máquina';


/******************** Add Table: postura ************************/

/* Build Table Structure */
CREATE TABLE postura
(
	id INTEGER DEFAULT nextval('postura_id_seq'::regclass) NOT NULL,
	ambiente_historial_lote_id INTEGER NOT NULL,
	fecha TIMESTAMP NOT NULL,
	cantidad INTEGER NOT NULL,
	deleted_at TIMESTAMP NULL
);

/* Add Primary Key */
ALTER TABLE postura ADD CONSTRAINT pkpostura
	PRIMARY KEY (id);


/******************** Add Table: postura_detalle ************************/

/* Build Table Structure */
CREATE TABLE postura_detalle
(
	id INTEGER DEFAULT nextval('postura_detalle_id_seq'::regclass) NOT NULL,
	postura_id INTEGER NOT NULL,
	clasificacion_postura_id INTEGER NOT NULL,
	empleado_id INTEGER NOT NULL,
	fecha_realizacion TIMESTAMP NOT NULL,
	cantidad INTEGER NOT NULL,
	ingreso_venta INTEGER DEFAULT 0 NULL,
	deleted_at TIMESTAMP NULL
);

/* Add Primary Key */
ALTER TABLE postura_detalle ADD CONSTRAINT pkpostura_detalle
	PRIMARY KEY (id);

/* Add Indexes */
CREATE UNIQUE INDEX "postura_detalle_postura_id_clasificacion_postura_id_Idx" ON postura_detalle USING btree (postura_id, clasificacion_postura_id);


/******************** Add Table: presentacion ************************/

/* Build Table Structure */
CREATE TABLE presentacion
(
	id INTEGER DEFAULT nextval('presentacion_id_seq'::regclass) NOT NULL,
	nombre VARCHAR(50) NOT NULL,
	observacion VARCHAR(1024) NULL,
	deleted_at TIMESTAMP NULL
);

/* Add Primary Key */
ALTER TABLE presentacion ADD CONSTRAINT pkpresentacion
	PRIMARY KEY (id);


/******************** Add Table: raza ************************/

/* Build Table Structure */
CREATE TABLE raza
(
	id INTEGER DEFAULT nextval('raza_id_seq'::regclass) NOT NULL,
	nombre VARCHAR(80) NOT NULL,
	descripcion VARCHAR(1024) NULL,
	foto VARCHAR(1024) NULL,
	deleted_at TIMESTAMP NULL
);

/* Add Primary Key */
ALTER TABLE raza ADD CONSTRAINT pkraza
	PRIMARY KEY (id);


/******************** Add Table: razon_salida ************************/

/* Build Table Structure */
CREATE TABLE razon_salida
(
	id INTEGER DEFAULT nextval('razon_salida_id_seq'::regclass) NOT NULL,
	razon VARCHAR(1024) NOT NULL,
	observacion VARCHAR(1024) NOT NULL,
	deleted_at TIMESTAMP NULL
);

/* Add Primary Key */
ALTER TABLE razon_salida ADD CONSTRAINT pkrazon_salida
	PRIMARY KEY (id);


/******************** Add Table: recordar_me ************************/

/* Build Table Structure */
CREATE TABLE recordar_me
(
	id INTEGER DEFAULT nextval('recordar_me_id_seq'::regclass) NOT NULL,
	usuario_id INTEGER NOT NULL,
	ip_address VARCHAR(50) NOT NULL,
	hash_cookie VARCHAR(32) DEFAULT 'hash md5 que identifica al usuario con su cookie' NOT NULL,
	created_at TIMESTAMP NOT NULL,
	deleted_at TIMESTAMP NULL
);

/* Add Primary Key */
ALTER TABLE recordar_me ADD CONSTRAINT pkrecordar_me
	PRIMARY KEY (id);

/* Add Indexes */
CREATE UNIQUE INDEX "recordar_me_ip_address_hash_cookie_Idx" ON recordar_me USING btree (ip_address, hash_cookie);

CREATE INDEX "recordar_me_usuario_id_Idx" ON recordar_me USING btree (usuario_id);


/******************** Add Table: registro_alistamiento ************************/

/* Build Table Structure */
CREATE TABLE registro_alistamiento
(
	id INTEGER DEFAULT nextval('registro_alistamiento_id_seq'::regclass) NOT NULL,
	fecha_inicio TIMESTAMP NOT NULL,
	fecha_fin TIMESTAMP NOT NULL,
	lote_id INTEGER NOT NULL,
	fecha_inicio_cortina TIMESTAMP NOT NULL,
	fecha_fin_cortina TIMESTAMP NOT NULL,
	salida_insumo_detalle_id_cortina INTEGER NOT NULL,
	salida_insumo_detalle_id_cama INTEGER NOT NULL,
	fecha_entrada_cama TIMESTAMP NOT NULL,
	fecha_termino_cama TIMESTAMP NOT NULL,
	fecha_entrada_equipo TIMESTAMP NOT NULL,
	deleted_at TIMESTAMP NULL
);

/* Add Primary Key */
ALTER TABLE registro_alistamiento ADD CONSTRAINT pkregistro_alistamiento
	PRIMARY KEY (id);

/* Add Comments */
COMMENT ON COLUMN registro_alistamiento.fecha_entrada_equipo IS 'Fecha de entrada de los equipos a la ramada despues de un matenimiento';


/******************** Add Table: registro_alistamiento_detalle_desinfeccion ************************/

/* Build Table Structure */
CREATE TABLE registro_alistamiento_detalle_desinfeccion
(
	id INTEGER DEFAULT nextval('registro_alistamiento_detalle_desinfeccion_id_seq'::regclass) NOT NULL,
	registro_alistamiento_id INTEGER NOT NULL,
	registro_desinfeccion_id INTEGER NOT NULL,
	deleted_at TIMESTAMP NULL
);

/* Add Primary Key */
ALTER TABLE registro_alistamiento_detalle_desinfeccion ADD CONSTRAINT pkregistro_alistamiento_detalle_desinfeccion
	PRIMARY KEY (id);


/******************** Add Table: registro_desinfeccion ************************/

/* Build Table Structure */
CREATE TABLE registro_desinfeccion
(
	id INTEGER DEFAULT nextval('registro_desinfeccion_id_seq'::regclass) NOT NULL,
	fecha_realizacion TIMESTAMP NOT NULL,
	fecha_terminado TIMESTAMP NULL,
	empleado_id_responsable INTEGER NOT NULL,
	empleado_id_verificador INTEGER NOT NULL,
	salida_insumo_detalle_id INTEGER NOT NULL,
	solucion VARCHAR(1024) NOT NULL,
	observacion VARCHAR(1024) NULL,
	tipo_desinfeccion_id INTEGER NOT NULL,
	deleted_at TIMESTAMP NULL
);

/* Add Primary Key */
ALTER TABLE registro_desinfeccion ADD CONSTRAINT pkregistro_desinfeccion
	PRIMARY KEY (id);

/* Add Comments */
COMMENT ON COLUMN registro_desinfeccion.solucion IS 'Cantidad usada de insumo y ¿en qué se ha disuelto?';


/******************** Add Table: registro_desinfeccion_detalle ************************/

/* Build Table Structure */
CREATE TABLE registro_desinfeccion_detalle
(
	id INTEGER DEFAULT nextval('registro_desinfeccion_detalle_id_seq'::regclass) NOT NULL,
	registro_desinfeccion_id INTEGER NOT NULL,
	ambiente_id INTEGER NOT NULL,
	deleted_at TIMESTAMP NULL
);

/* Add Primary Key */
ALTER TABLE registro_desinfeccion_detalle ADD CONSTRAINT pkregistro_desinfeccion_detalle
	PRIMARY KEY (id);


/******************** Add Table: requisicion ************************/

/* Build Table Structure */
CREATE TABLE requisicion
(
	id INTEGER DEFAULT nextval('requisicion_id_seq'::regclass) NOT NULL,
	empleado_id INTEGER NOT NULL,
	fecha_realizacion TIMESTAMP NOT NULL,
	anulado BOOL DEFAULT 'f' NULL,
	deleted_at TIMESTAMP NULL
);

/* Add Primary Key */
ALTER TABLE requisicion ADD CONSTRAINT pkrequisicion
	PRIMARY KEY (id);

/* Add Comments */
COMMENT ON COLUMN requisicion.anulado IS 'true = anulado o false = no anulado';


/******************** Add Table: requisicion_detalle ************************/

/* Build Table Structure */
CREATE TABLE requisicion_detalle
(
	id INTEGER DEFAULT nextval('requisicion_detalle_id_seq'::regclass) NOT NULL,
	requisicion_id INTEGER NOT NULL,
	bodega_id INTEGER NOT NULL,
	cantidad INTEGER NOT NULL,
	fecha_necesidad TIMESTAMP NULL,
	deleted_at TIMESTAMP NULL
);

/* Add Primary Key */
ALTER TABLE requisicion_detalle ADD CONSTRAINT pkrequisicion_detalle
	PRIMARY KEY (id);

/* Add Comments */
COMMENT ON COLUMN requisicion_detalle.fecha_necesidad IS 'Para cuando necesita el insumo?';


/******************** Add Table: salida_detalle_incubadora ************************/

/* Build Table Structure */
CREATE TABLE salida_detalle_incubadora
(
	id INTEGER DEFAULT nextval('salida_detalle_incubadora_id_seq'::regclass) NOT NULL,
	salida_incubadora_id INTEGER NOT NULL,
	cantidad INTEGER NOT NULL,
	descripcion VARCHAR(1024) NOT NULL,
	tipo_empaque_id INTEGER NOT NULL,
	cantidad_empaque INTEGER NOT NULL,
	deleted_at TIMESTAMP NULL
);

/* Add Primary Key */
ALTER TABLE salida_detalle_incubadora ADD CONSTRAINT pksalida_detalle_incubadora
	PRIMARY KEY (id);

/* Add Indexes */
CREATE INDEX "salida_dealle_incdora_salida_iubadora_id_Idx" ON salida_detalle_incubadora USING btree (salida_incubadora_id);

CREATE INDEX "salida_detalle_incuora_tipo_aque_id_Idx" ON salida_detalle_incubadora USING btree (tipo_empaque_id);


/******************** Add Table: salida_detalle_postura ************************/

/* Build Table Structure */
CREATE TABLE salida_detalle_postura
(
	id INTEGER DEFAULT nextval('salida_detalle_postura_id_seq'::regclass) NOT NULL,
	salida_detalle_id INTEGER NOT NULL,
	postura_detalle_id INTEGER NOT NULL,
	cantidad INTEGER NOT NULL,
	deleted_at TIMESTAMP NULL
);

/* Add Primary Key */
ALTER TABLE salida_detalle_postura ADD CONSTRAINT pksalida_detalle_postura
	PRIMARY KEY (id);


/******************** Add Table: salida_incubadora ************************/

/* Build Table Structure */
CREATE TABLE salida_incubadora
(
	id INTEGER DEFAULT nextval('salida_incubadora_id_seq'::regclass) NOT NULL,
	incubadora_id INTEGER NOT NULL,
	cantidad INTEGER NOT NULL,
	fecha TIMESTAMP NOT NULL,
	no_pedido INTEGER NOT NULL,
	fecha_llegada TIMESTAMP NOT NULL,
	fecha_salida TIMESTAMP NULL,
	empleado_id INTEGER NOT NULL,
	deleted_at TIMESTAMP NULL
);

/* Add Primary Key */
ALTER TABLE salida_incubadora ADD CONSTRAINT pksalida_incubadora
	PRIMARY KEY (id);

/* Add Comments */
COMMENT ON COLUMN salida_incubadora.fecha_llegada IS 'fecha de llegada del camión a la granja';

COMMENT ON COLUMN salida_incubadora.fecha_salida IS 'fecha de salida del camión de la granja';


/******************** Add Table: salida_insumo ************************/

/* Build Table Structure */
CREATE TABLE salida_insumo
(
	id INTEGER DEFAULT nextval('salida_insumo_id_seq'::regclass) NOT NULL,
	empleado_id_salida INTEGER NOT NULL,
	empleado_id_recepcion INTEGER NOT NULL,
	fecha TIMESTAMP NOT NULL,
	observacion VARCHAR(1024) NULL,
	anulado BOOL DEFAULT 'f' NULL,
	requisicion_id INTEGER NOT NULL,
	deleted_at TIMESTAMP NULL
);

/* Add Primary Key */
ALTER TABLE salida_insumo ADD CONSTRAINT pksalida_insumo
	PRIMARY KEY (id);

/* Add Comments */
COMMENT ON COLUMN salida_insumo.empleado_id_salida IS 'Quien hace la salida';

COMMENT ON COLUMN salida_insumo.empleado_id_recepcion IS 'Quien recepciona el insumo';

COMMENT ON COLUMN salida_insumo.anulado IS 'true = anulado o false = no anulado';


/******************** Add Table: salida_insumo_detalle ************************/

/* Build Table Structure */
CREATE TABLE salida_insumo_detalle
(
	id INTEGER DEFAULT nextval('salida_insumo_detalle_id_seq'::regclass) NOT NULL,
	salida_insumo_id INTEGER NOT NULL,
	insumo_id INTEGER NOT NULL,
	cantidad INTEGER NOT NULL,
	observacion VARCHAR(1024) NULL,
	anulado BOOL DEFAULT 'f' NULL,
	deleted_at TIMESTAMP NULL
);

/* Add Primary Key */
ALTER TABLE salida_insumo_detalle ADD CONSTRAINT pksalida_insumo_detalle
	PRIMARY KEY (id);

/* Add Comments */
COMMENT ON COLUMN salida_insumo_detalle.anulado IS 'true = anulado o false = no anulado';


/******************** Add Table: salida_lote ************************/

/* Build Table Structure */
CREATE TABLE salida_lote
(
	id INTEGER DEFAULT nextval('salida_lote_id_seq'::regclass) NOT NULL,
	ambiente_historial_lote_id INTEGER NULL,
	razon_salida_id INTEGER NOT NULL,
	cantidad_total INTEGER NOT NULL,
	cantidad_machos INTEGER DEFAULT 0 NOT NULL,
	cantidad_hembras INTEGER DEFAULT 0 NOT NULL,
	empleado_id INTEGER NOT NULL,
	deleted_at TIMESTAMP NULL
);

/* Add Primary Key */
ALTER TABLE salida_lote ADD CONSTRAINT pksalida_lote
	PRIMARY KEY (id);

/* Add Comments */
COMMENT ON COLUMN salida_lote.empleado_id IS 'Persona quien tramita la salida';


/******************** Add Table: tipo_ambiente ************************/

/* Build Table Structure */
CREATE TABLE tipo_ambiente
(
	id INTEGER DEFAULT nextval('tipo_ambiente_id_seq'::regclass) NOT NULL,
	nombre VARCHAR(80) NOT NULL,
	descripcion VARCHAR(1024) NULL,
	observacion VARCHAR(1024) NULL,
	deleted_at TIMESTAMP NULL
);

/* Add Primary Key */
ALTER TABLE tipo_ambiente ADD CONSTRAINT pktipo_ambiente
	PRIMARY KEY (id);


/******************** Add Table: tipo_desinfeccion ************************/

/* Build Table Structure */
CREATE TABLE tipo_desinfeccion
(
	id INTEGER DEFAULT nextval('tipo_desinfeccion_id_seq'::regclass) NOT NULL,
	nombre VARCHAR(80) NOT NULL,
	observacion VARCHAR(1024) NULL,
	deleted_at TIMESTAMP NULL
);

/* Add Primary Key */
ALTER TABLE tipo_desinfeccion ADD CONSTRAINT pktipo_desinfeccion
	PRIMARY KEY (id);


/******************** Add Table: tipo_empaque ************************/

/* Build Table Structure */
CREATE TABLE tipo_empaque
(
	id INTEGER DEFAULT nextval('tipo_empaque_id_seq'::regclass) NOT NULL,
	nombre VARCHAR(80) NOT NULL,
	cantidad INTEGER NOT NULL,
	descripcion VARCHAR(1024) NULL,
	deleted_at TIMESTAMP NULL
);

/* Add Primary Key */
ALTER TABLE tipo_empaque ADD CONSTRAINT pktipo_empaque
	PRIMARY KEY (id);

/* Add Comments */
COMMENT ON COLUMN tipo_empaque.cantidad IS 'Charolas 54 o Panales de 30';

COMMENT ON COLUMN tipo_empaque.descripcion IS 'indicar <> entre nombre y descripcion';


/******************** Add Table: tipo_identificacion ************************/

/* Build Table Structure */
CREATE TABLE tipo_identificacion
(
	id INTEGER DEFAULT nextval('tipo_identificacion_id_seq'::regclass) NOT NULL,
	descripcion VARCHAR(50) NOT NULL,
	deleted_at TIMESTAMP NULL
);

/* Add Primary Key */
ALTER TABLE tipo_identificacion ADD CONSTRAINT pktipo_identificacion
	PRIMARY KEY (id);


/******************** Add Table: tipo_insumo ************************/

/* Build Table Structure */
CREATE TABLE tipo_insumo
(
	id INTEGER DEFAULT nextval('tipo_insumo_id_seq'::regclass) NOT NULL,
	nombre VARCHAR(50) NOT NULL,
	observacion VARCHAR(1024) NULL,
	deleted_at TIMESTAMP NULL
);

/* Add Primary Key */
ALTER TABLE tipo_insumo ADD CONSTRAINT pktipo_insumo
	PRIMARY KEY (id);

/* Add Comments */
COMMENT ON TABLE tipo_insumo IS 'Por ejemplo medicamento, alimento, material de construcción';


/******************** Add Table: tipo_mantenimiento ************************/

/* Build Table Structure */
CREATE TABLE tipo_mantenimiento
(
	id INTEGER DEFAULT nextval('tipo_mantenimiento_id_seq'::regclass) NOT NULL,
	nombre VARCHAR(50) NOT NULL,
	descripcion VARCHAR(1024) NULL,
	deleted_at TIMESTAMP NULL
);

/* Add Primary Key */
ALTER TABLE tipo_mantenimiento ADD CONSTRAINT pktipo_mantenimiento
	PRIMARY KEY (id);


/******************** Add Table: tipo_reparacion ************************/

/* Build Table Structure */
CREATE TABLE tipo_reparacion
(
	id INTEGER DEFAULT nextval('tipo_reparacion_id_seq'::regclass) NOT NULL,
	nombre VARCHAR(80) NOT NULL,
	observacion VARCHAR(1024) NOT NULL,
	deleted_at TIMESTAMP NULL
);

/* Add Primary Key */
ALTER TABLE tipo_reparacion ADD CONSTRAINT pktipo_reparacion
	PRIMARY KEY (id);


/******************** Add Table: transportador ************************/

/* Build Table Structure */
CREATE TABLE transportador
(
	id INTEGER DEFAULT nextval('transportador_id_seq'::regclass) NOT NULL,
	nombre VARCHAR(100) NOT NULL,
	observacion VARCHAR(1024) NULL,
	deleted_at TIMESTAMP NULL
);

/* Add Primary Key */
ALTER TABLE transportador ADD CONSTRAINT pktransportador
	PRIMARY KEY (id);


/******************** Add Table: unidad_medida ************************/

/* Build Table Structure */
CREATE TABLE unidad_medida
(
	id INTEGER DEFAULT nextval('unidad_medida_id_seq'::regclass) NOT NULL,
	nombre VARCHAR(50) NOT NULL,
	sigla VARCHAR(10) NOT NULL,
	observacion VARCHAR(1024) NULL,
	deleted_at TIMESTAMP NULL
);

/* Add Primary Key */
ALTER TABLE unidad_medida ADD CONSTRAINT pkunidad_medida
	PRIMARY KEY (id);


/******************** Add Table: usuario ************************/

/* Build Table Structure */
CREATE TABLE usuario
(
	id INTEGER DEFAULT nextval('usuario_id_seq'::regclass) NOT NULL,
	user_name VARCHAR(80) NOT NULL,
	password VARCHAR(32) NOT NULL,
	actived BOOL DEFAULT 't' NOT NULL,
	created_at TIMESTAMP NOT NULL,
	updated_at TIMESTAMP NULL,
	deleted_at TIMESTAMP NULL,
	last_login_at TIMESTAMP NULL
) WITHOUT OIDS;

/* Add Primary Key */
ALTER TABLE usuario ADD CONSTRAINT pkusuario
	PRIMARY KEY (id);

/* Add Comments */
COMMENT ON COLUMN usuario.user_name IS 'Usuario del sistema';

COMMENT ON COLUMN usuario.password IS 'Password encriptado en MD5';

/* Add Indexes */
CREATE UNIQUE INDEX "nm_user_user_Idx" ON usuario USING btree (user_name);

CREATE INDEX "nm_user_user_password_Idx" ON usuario USING btree (user_name, password);

CREATE INDEX "usuario_actived_Idx" ON usuario USING btree (actived);

CREATE INDEX "usuario_user_password_actived_Idx" ON usuario USING btree (user_name, password, actived);


/******************** Add Table: usuario_credencial ************************/

/* Build Table Structure */
CREATE TABLE usuario_credencial
(
	usuario_id INTEGER NOT NULL,
	credencial_id INTEGER NOT NULL,
	created_at TIMESTAMP NOT NULL,
	deleted_at TIMESTAMP NULL
);

/* Add Primary Key */
ALTER TABLE usuario_credencial ADD CONSTRAINT pkusuario_credencial
	PRIMARY KEY (usuario_id, credencial_id);

/* Add Indexes */
CREATE INDEX "usuario_credencial_credencial_id_Idx" ON usuario_credencial USING btree (credencial_id);

CREATE INDEX "usuario_credencial_usuario_id_Idx" ON usuario_credencial USING btree (usuario_id);

CREATE UNIQUE INDEX "usuario_credencial_usuario_id_credencial_id_Idx" ON usuario_credencial USING btree (usuario_id, credencial_id);





/************ Add Foreign Keys ***************/

/* Add Foreign Key: fk_alistamiento_reparacion_registro_alistamiento */
ALTER TABLE alistamiento_reparacion ADD CONSTRAINT fk_alistamiento_reparacion_registro_alistamiento
	FOREIGN KEY (registro_alistamiento_id) REFERENCES registro_alistamiento (id)
	ON UPDATE RESTRICT ON DELETE RESTRICT;

/* Add Foreign Key: fk_alistamiento_reparacion_tipo_reparacion */
ALTER TABLE alistamiento_reparacion ADD CONSTRAINT fk_alistamiento_reparacion_tipo_reparacion
	FOREIGN KEY (tipo_reparacion_id) REFERENCES tipo_reparacion (id)
	ON UPDATE RESTRICT ON DELETE RESTRICT;

/* Add Foreign Key: fk_ambiente_tipo_ambiente */
ALTER TABLE ambiente ADD CONSTRAINT fk_ambiente_tipo_ambiente
	FOREIGN KEY (tipo_ambiente_id) REFERENCES tipo_ambiente (id)
	ON UPDATE RESTRICT ON DELETE RESTRICT;

/* Add Foreign Key: fk_ambiente_historial_lote_ambiente */
ALTER TABLE ambiente_historial_lote ADD CONSTRAINT fk_ambiente_historial_lote_ambiente
	FOREIGN KEY (ambiente_id) REFERENCES ambiente (id)
	ON UPDATE RESTRICT ON DELETE RESTRICT;

/* Add Foreign Key: fk_ambiente_historial_lote_lote */
ALTER TABLE ambiente_historial_lote ADD CONSTRAINT fk_ambiente_historial_lote_lote
	FOREIGN KEY (lote_id) REFERENCES lote (id)
	ON UPDATE RESTRICT ON DELETE RESTRICT;

/* Add Foreign Key: fk_ambiente_insumo_ambiente */
ALTER TABLE ambiente_insumo ADD CONSTRAINT fk_ambiente_insumo_ambiente
	FOREIGN KEY (ambiente_id) REFERENCES ambiente (id)
	ON UPDATE RESTRICT ON DELETE RESTRICT;

/* Add Foreign Key: fk_ambiente_insumo_salida_insumo_detalle */
ALTER TABLE ambiente_insumo ADD CONSTRAINT fk_ambiente_insumo_salida_insumo_detalle
	FOREIGN KEY (salida_insumo_detalle_id) REFERENCES salida_insumo_detalle (id)
	ON UPDATE RESTRICT ON DELETE RESTRICT;

/* Add Foreign Key: fk_bitacora_usuario */
ALTER TABLE bitacora ADD CONSTRAINT fk_bitacora_usuario
	FOREIGN KEY (usuario_id) REFERENCES usuario (id)
	ON UPDATE RESTRICT ON DELETE RESTRICT;

/* Add Foreign Key: fk_bodega_bodega_clasificacion */
ALTER TABLE bodega ADD CONSTRAINT fk_bodega_bodega_clasificacion
	FOREIGN KEY (bodega_clasificacion_id) REFERENCES bodega_clasificacion (id)
	ON UPDATE RESTRICT ON DELETE RESTRICT;

/* Add Foreign Key: fk_bodega_entrada_bodega */
ALTER TABLE bodega ADD CONSTRAINT fk_bodega_entrada_bodega
	FOREIGN KEY (entrada_bodega_id) REFERENCES entrada_bodega (id)
	ON UPDATE RESTRICT ON DELETE RESTRICT;

/* Add Foreign Key: fk_bodega_insumo */
ALTER TABLE bodega ADD CONSTRAINT fk_bodega_insumo
	FOREIGN KEY (insumo_id) REFERENCES insumo (id)
	ON UPDATE RESTRICT ON DELETE RESTRICT;

/* Add Foreign Key: fk_bodega_lote */
ALTER TABLE bodega ADD CONSTRAINT fk_bodega_lote
	FOREIGN KEY (lote_id) REFERENCES lote (id)
	ON UPDATE RESTRICT ON DELETE RESTRICT;

/* Add Foreign Key: fk_clasificacion_postura_clasificacion_postura */
ALTER TABLE clasificacion_postura ADD CONSTRAINT fk_clasificacion_postura_clasificacion_postura
	FOREIGN KEY (clasificacion_postura_id) REFERENCES clasificacion_postura (id)
	ON UPDATE RESTRICT ON DELETE RESTRICT;

/* Add Foreign Key: fk_control_alimento_ambiente_historial_lote */
ALTER TABLE control_alimento ADD CONSTRAINT fk_control_alimento_ambiente_historial_lote
	FOREIGN KEY (ambiente_historial_lote_id) REFERENCES ambiente_historial_lote (id)
	ON UPDATE RESTRICT ON DELETE RESTRICT;

/* Add Foreign Key: fk_control_alimento_empleado */
ALTER TABLE control_alimento ADD CONSTRAINT fk_control_alimento_empleado
	FOREIGN KEY (id_empleado) REFERENCES empleado (id)
	ON UPDATE RESTRICT ON DELETE RESTRICT;

/* Add Foreign Key: fk_control_alimento_salida_insumo_detalle */
ALTER TABLE control_alimento ADD CONSTRAINT fk_control_alimento_salida_insumo_detalle
	FOREIGN KEY (salida_insumo_detalle_id) REFERENCES salida_insumo_detalle (id)
	ON UPDATE RESTRICT ON DELETE RESTRICT;

/* Add Foreign Key: fk_control_compostaje_cajon_compostaje */
ALTER TABLE control_compostaje ADD CONSTRAINT fk_control_compostaje_cajon_compostaje
	FOREIGN KEY (cajon_compostaje_id) REFERENCES cajon_compostaje (id)
	ON UPDATE RESTRICT ON DELETE RESTRICT;

/* Add Foreign Key: fk_control_compostaje_empleado_administrador */
ALTER TABLE control_compostaje ADD CONSTRAINT fk_control_compostaje_empleado_administrador
	FOREIGN KEY (empleado_id_administrador) REFERENCES empleado (id)
	ON UPDATE RESTRICT ON DELETE RESTRICT;

/* Add Foreign Key: fk_control_compostaje_empleado_responsable */
ALTER TABLE control_compostaje ADD CONSTRAINT fk_control_compostaje_empleado_responsable
	FOREIGN KEY (empleado_id_responsable) REFERENCES empleado (id)
	ON UPDATE RESTRICT ON DELETE RESTRICT;

/* Add Foreign Key: fk_control_compostaje_empleado_veterinario */
ALTER TABLE control_compostaje ADD CONSTRAINT fk_control_compostaje_empleado_veterinario
	FOREIGN KEY (empleado_id_veterinario) REFERENCES empleado (id)
	ON UPDATE RESTRICT ON DELETE RESTRICT;

/* Add Foreign Key: fk_control_compostaje_salida_lote */
ALTER TABLE control_compostaje ADD CONSTRAINT fk_control_compostaje_salida_lote
	FOREIGN KEY (salida_lote_id) REFERENCES salida_lote (id)
	ON UPDATE RESTRICT ON DELETE RESTRICT;

/* Add Foreign Key: fk_control_cucarron_empleado_administrador */
ALTER TABLE control_cucarron ADD CONSTRAINT fk_control_cucarron_empleado_administrador
	FOREIGN KEY (empleado_id_administrador) REFERENCES empleado (id)
	ON UPDATE RESTRICT ON DELETE RESTRICT;

/* Add Foreign Key: fk_control_cucarron_empleado_empleado */
ALTER TABLE control_cucarron ADD CONSTRAINT fk_control_cucarron_empleado_empleado
	FOREIGN KEY (empleado_id_responsable) REFERENCES empleado (id)
	ON UPDATE RESTRICT ON DELETE RESTRICT;

/* Add Foreign Key: fk_control_cucarron_empleado_veterinario */
ALTER TABLE control_cucarron ADD CONSTRAINT fk_control_cucarron_empleado_veterinario
	FOREIGN KEY (empleado_id_veterianario) REFERENCES empleado (id)
	ON UPDATE RESTRICT ON DELETE RESTRICT;

/* Add Foreign Key: fk_control_cucarron_forma_aplicacion */
ALTER TABLE control_cucarron ADD CONSTRAINT fk_control_cucarron_forma_aplicacion
	FOREIGN KEY (forma_aplicacion_id) REFERENCES forma_aplicacion (id)
	ON UPDATE RESTRICT ON DELETE RESTRICT;

/* Add Foreign Key: fk_control_cucarron_salida_insumo_detalle */
ALTER TABLE control_cucarron ADD CONSTRAINT fk_control_cucarron_salida_insumo_detalle
	FOREIGN KEY (salida_insumo_detalle_id) REFERENCES salida_insumo_detalle (id)
	ON UPDATE RESTRICT ON DELETE RESTRICT;

/* Add Foreign Key: fk_control_roedores_empleado_administrador */
ALTER TABLE control_roedores ADD CONSTRAINT fk_control_roedores_empleado_administrador
	FOREIGN KEY (empleado_id_administrador) REFERENCES empleado (id)
	ON UPDATE RESTRICT ON DELETE RESTRICT;

/* Add Foreign Key: fk_control_roedores_empleado_responsable */
ALTER TABLE control_roedores ADD CONSTRAINT fk_control_roedores_empleado_responsable
	FOREIGN KEY (empleado_id_responsable) REFERENCES empleado (id)
	ON UPDATE RESTRICT ON DELETE RESTRICT;

/* Add Foreign Key: fk_control_roedores_empleado_veterinario */
ALTER TABLE control_roedores ADD CONSTRAINT fk_control_roedores_empleado_veterinario
	FOREIGN KEY (empleado_id_veterinario) REFERENCES empleado (id)
	ON UPDATE RESTRICT ON DELETE RESTRICT;

/* Add Foreign Key: fk_control_roedores_salida_insumo_detalle */
ALTER TABLE control_roedores ADD CONSTRAINT fk_control_roedores_salida_insumo_detalle
	FOREIGN KEY (salida_insumo_detalle_id) REFERENCES salida_insumo_detalle (id)
	ON UPDATE RESTRICT ON DELETE RESTRICT;

/* Add Foreign Key: fk_detalle_mantenimiento_correctivo_mantenimiento_correctivo */
ALTER TABLE detalle_mantenimiento ADD CONSTRAINT fk_detalle_mantenimiento_correctivo_mantenimiento_correctivo
	FOREIGN KEY (mantenimiento_id) REFERENCES mantenimiento (id)
	ON UPDATE RESTRICT ON DELETE RESTRICT;

/* Add Foreign Key: fk_devolucion_incubadora_empleado */
ALTER TABLE devolucion_incubadora ADD CONSTRAINT fk_devolucion_incubadora_empleado
	FOREIGN KEY (empleado_id) REFERENCES empleado (id)
	ON UPDATE RESTRICT ON DELETE RESTRICT;

/* Add Foreign Key: fk_devolucion_incubadora_salida_incubadora */
ALTER TABLE devolucion_incubadora ADD CONSTRAINT fk_devolucion_incubadora_salida_incubadora
	FOREIGN KEY (salida_incubadora_id) REFERENCES salida_incubadora (id)
	ON UPDATE RESTRICT ON DELETE RESTRICT;

/* Add Foreign Key: fk_empleado_cargo */
ALTER TABLE empleado ADD CONSTRAINT fk_empleado_cargo
	FOREIGN KEY (cargo_id) REFERENCES cargo (id)
	ON UPDATE RESTRICT ON DELETE RESTRICT;

/* Add Foreign Key: fk_empleado_localizacion */
ALTER TABLE empleado ADD CONSTRAINT fk_empleado_localizacion
	FOREIGN KEY (localizacion_id) REFERENCES localizacion (id)
	ON UPDATE RESTRICT ON DELETE RESTRICT;

/* Add Foreign Key: fk_empleado_tipo_identificacion */
ALTER TABLE empleado ADD CONSTRAINT fk_empleado_tipo_identificacion
	FOREIGN KEY (tipo_identificacion_id) REFERENCES tipo_identificacion (id)
	ON UPDATE RESTRICT ON DELETE RESTRICT;

/* Add Foreign Key: fk_empleado_usuario */
ALTER TABLE empleado ADD CONSTRAINT fk_empleado_usuario
	FOREIGN KEY (usuario_id) REFERENCES usuario (id)
	ON UPDATE RESTRICT ON DELETE RESTRICT;

/* Add Foreign Key: fk_entrada_bodega_empleado */
ALTER TABLE entrada_bodega ADD CONSTRAINT fk_entrada_bodega_empleado
	FOREIGN KEY (empleado_id) REFERENCES empleado (id)
	ON UPDATE RESTRICT ON DELETE RESTRICT;

/* Add Foreign Key: fk_entrada_bodega_transportador */
ALTER TABLE entrada_bodega ADD CONSTRAINT fk_entrada_bodega_transportador
	FOREIGN KEY (transportador_id) REFERENCES transportador (id)
	ON UPDATE RESTRICT ON DELETE RESTRICT;

/* Add Foreign Key: fk_incubadora_localizacion */
ALTER TABLE incubadora ADD CONSTRAINT fk_incubadora_localizacion
	FOREIGN KEY (localizacion_id) REFERENCES localizacion (id)
	ON UPDATE RESTRICT ON DELETE RESTRICT;

/* Add Foreign Key: fk_insumo_presentacion */
ALTER TABLE insumo ADD CONSTRAINT fk_insumo_presentacion
	FOREIGN KEY (presentacion_id) REFERENCES presentacion (id)
	ON UPDATE RESTRICT ON DELETE RESTRICT;

/* Add Foreign Key: fk_insumo_tipo_insumo */
ALTER TABLE insumo ADD CONSTRAINT fk_insumo_tipo_insumo
	FOREIGN KEY (tipo_insumo_id) REFERENCES tipo_insumo (id)
	ON UPDATE RESTRICT ON DELETE RESTRICT;

/* Add Foreign Key: fk_insumo_unidad_medida */
ALTER TABLE insumo ADD CONSTRAINT fk_insumo_unidad_medida
	FOREIGN KEY (unidad_medida_id) REFERENCES unidad_medida (id)
	ON UPDATE RESTRICT ON DELETE RESTRICT;

/* Add Foreign Key: fk_localizacion_localizacion */
ALTER TABLE localizacion ADD CONSTRAINT fk_localizacion_localizacion
	FOREIGN KEY (localizacion_id) REFERENCES localizacion (id)
	ON UPDATE RESTRICT ON DELETE RESTRICT;

/* Add Foreign Key: fk_lote_empleado */
ALTER TABLE lote ADD CONSTRAINT fk_lote_empleado
	FOREIGN KEY (empleado_id) REFERENCES empleado (id)
	ON UPDATE RESTRICT ON DELETE RESTRICT;

/* Add Foreign Key: fk_lote_raza */
ALTER TABLE lote ADD CONSTRAINT fk_lote_raza
	FOREIGN KEY (raza_id) REFERENCES raza (id)
	ON UPDATE RESTRICT ON DELETE RESTRICT;

/* Add Foreign Key: fk_mantenimiento_correctivo_empleado */
ALTER TABLE mantenimiento ADD CONSTRAINT fk_mantenimiento_correctivo_empleado
	FOREIGN KEY (empleado_id) REFERENCES empleado (id)
	ON UPDATE RESTRICT ON DELETE RESTRICT;

/* Add Foreign Key: fk_mantenimiento_correctivo_maquina */
ALTER TABLE mantenimiento ADD CONSTRAINT fk_mantenimiento_correctivo_maquina
	FOREIGN KEY (maquina_id) REFERENCES maquina (id)
	ON UPDATE RESTRICT ON DELETE RESTRICT;

/* Add Foreign Key: fk_mantenimiento_correctivo_tipo_mantenimiento */
ALTER TABLE mantenimiento ADD CONSTRAINT fk_mantenimiento_correctivo_tipo_mantenimiento
	FOREIGN KEY (tipo_mantenimiento_id) REFERENCES tipo_mantenimiento (id)
	ON UPDATE RESTRICT ON DELETE RESTRICT;

/* Add Foreign Key: fk_postura_ambiente_historial_lote */
ALTER TABLE postura ADD CONSTRAINT fk_postura_ambiente_historial_lote
	FOREIGN KEY (ambiente_historial_lote_id) REFERENCES ambiente_historial_lote (id)
	ON UPDATE RESTRICT ON DELETE RESTRICT;

/* Add Foreign Key: fk_postura_detalle_clasificacion_postura */
ALTER TABLE postura_detalle ADD CONSTRAINT fk_postura_detalle_clasificacion_postura
	FOREIGN KEY (clasificacion_postura_id) REFERENCES clasificacion_postura (id)
	ON UPDATE RESTRICT ON DELETE RESTRICT;

/* Add Foreign Key: fk_postura_detalle_empleado */
ALTER TABLE postura_detalle ADD CONSTRAINT fk_postura_detalle_empleado
	FOREIGN KEY (empleado_id) REFERENCES empleado (id)
	ON UPDATE RESTRICT ON DELETE RESTRICT;

/* Add Foreign Key: fk_postura_detalle_postura */
ALTER TABLE postura_detalle ADD CONSTRAINT fk_postura_detalle_postura
	FOREIGN KEY (postura_id) REFERENCES postura (id)
	ON UPDATE RESTRICT ON DELETE RESTRICT;

/* Add Foreign Key: fk_recordar_me_usuario */
ALTER TABLE recordar_me ADD CONSTRAINT fk_recordar_me_usuario
	FOREIGN KEY (usuario_id) REFERENCES usuario (id)
	ON UPDATE CASCADE ON DELETE CASCADE;

/* Add Foreign Key: fk_registro_alistamiento_lote */
ALTER TABLE registro_alistamiento ADD CONSTRAINT fk_registro_alistamiento_lote
	FOREIGN KEY (lote_id) REFERENCES lote (id)
	ON UPDATE RESTRICT ON DELETE RESTRICT;

/* Add Foreign Key: fk_registro_alistamiento_salida_insumo_detalle */
ALTER TABLE registro_alistamiento ADD CONSTRAINT fk_registro_alistamiento_salida_insumo_detalle
	FOREIGN KEY (salida_insumo_detalle_id_cortina) REFERENCES salida_insumo_detalle (id)
	ON UPDATE RESTRICT ON DELETE RESTRICT;

/* Add Foreign Key: fk_registro_alistamiento_salida_insumo_detalle_cama */
ALTER TABLE registro_alistamiento ADD CONSTRAINT fk_registro_alistamiento_salida_insumo_detalle_cama
	FOREIGN KEY (salida_insumo_detalle_id_cama) REFERENCES salida_insumo_detalle (id)
	ON UPDATE RESTRICT ON DELETE RESTRICT;

/* Add Foreign Key: fk_registro_alio_detalle_desinon_regiro_aliiento */
ALTER TABLE registro_alistamiento_detalle_desinfeccion ADD CONSTRAINT fk_registro_alio_detalle_desinon_regiro_aliiento
	FOREIGN KEY (registro_alistamiento_id) REFERENCES registro_alistamiento (id)
	ON UPDATE RESTRICT ON DELETE RESTRICT;

/* Add Foreign Key: fk_rero_alisto_de_feccion_rego_deccion */
ALTER TABLE registro_alistamiento_detalle_desinfeccion ADD CONSTRAINT fk_rero_alisto_de_feccion_rego_deccion
	FOREIGN KEY (registro_desinfeccion_id) REFERENCES registro_desinfeccion (id)
	ON UPDATE RESTRICT ON DELETE RESTRICT;

/* Add Foreign Key: fk_registro_desinfeccion_empleado_responsable */
ALTER TABLE registro_desinfeccion ADD CONSTRAINT fk_registro_desinfeccion_empleado_responsable
	FOREIGN KEY (empleado_id_responsable) REFERENCES empleado (id)
	ON UPDATE RESTRICT ON DELETE RESTRICT;

/* Add Foreign Key: fk_registro_desinfeccion_empleado_verificador */
ALTER TABLE registro_desinfeccion ADD CONSTRAINT fk_registro_desinfeccion_empleado_verificador
	FOREIGN KEY (empleado_id_verificador) REFERENCES empleado (id)
	ON UPDATE RESTRICT ON DELETE RESTRICT;

/* Add Foreign Key: fk_registro_desinfeccion_salida_insumo_detalle */
ALTER TABLE registro_desinfeccion ADD CONSTRAINT fk_registro_desinfeccion_salida_insumo_detalle
	FOREIGN KEY (salida_insumo_detalle_id) REFERENCES salida_insumo_detalle (id)
	ON UPDATE RESTRICT ON DELETE RESTRICT;

/* Add Foreign Key: fk_registro_desinfeccion_tipo_desinfeccion */
ALTER TABLE registro_desinfeccion ADD CONSTRAINT fk_registro_desinfeccion_tipo_desinfeccion
	FOREIGN KEY (tipo_desinfeccion_id) REFERENCES tipo_desinfeccion (id)
	ON UPDATE RESTRICT ON DELETE RESTRICT;

/* Add Foreign Key: fk_registro_desinfeccion_detalle_ambiente */
ALTER TABLE registro_desinfeccion_detalle ADD CONSTRAINT fk_registro_desinfeccion_detalle_ambiente
	FOREIGN KEY (ambiente_id) REFERENCES ambiente (id)
	ON UPDATE RESTRICT ON DELETE RESTRICT;

/* Add Foreign Key: fk_registro_desinfeccion_detalle_registro_desinfeccion */
ALTER TABLE registro_desinfeccion_detalle ADD CONSTRAINT fk_registro_desinfeccion_detalle_registro_desinfeccion
	FOREIGN KEY (registro_desinfeccion_id) REFERENCES registro_desinfeccion (id)
	ON UPDATE RESTRICT ON DELETE RESTRICT;

/* Add Foreign Key: fk_requisicion_empleado */
ALTER TABLE requisicion ADD CONSTRAINT fk_requisicion_empleado
	FOREIGN KEY (empleado_id) REFERENCES empleado (id)
	ON UPDATE NO ACTION ON DELETE NO ACTION;

/* Add Foreign Key: fk_requisicion_detalle_insumo */
ALTER TABLE requisicion_detalle ADD CONSTRAINT fk_requisicion_detalle_insumo
	FOREIGN KEY (bodega_id) REFERENCES bodega (id)
	ON UPDATE RESTRICT ON DELETE RESTRICT;

/* Add Foreign Key: fk_requisicion_detalle_requisicion */
ALTER TABLE requisicion_detalle ADD CONSTRAINT fk_requisicion_detalle_requisicion
	FOREIGN KEY (requisicion_id) REFERENCES requisicion (id)
	ON UPDATE RESTRICT ON DELETE RESTRICT;

/* Add Foreign Key: fk_salida_detalle_salida_incubadora */
ALTER TABLE salida_detalle_incubadora ADD CONSTRAINT fk_salida_detalle_salida_incubadora
	FOREIGN KEY (salida_incubadora_id) REFERENCES salida_incubadora (id)
	ON UPDATE RESTRICT ON DELETE RESTRICT;

/* Add Foreign Key: fk_salida_detalle_tipo_empaque */
ALTER TABLE salida_detalle_incubadora ADD CONSTRAINT fk_salida_detalle_tipo_empaque
	FOREIGN KEY (tipo_empaque_id) REFERENCES tipo_empaque (id)
	ON UPDATE RESTRICT ON DELETE RESTRICT;

/* Add Foreign Key: fk_salida_detalle_postura_postura_detalle */
ALTER TABLE salida_detalle_postura ADD CONSTRAINT fk_salida_detalle_postura_postura_detalle
	FOREIGN KEY (postura_detalle_id) REFERENCES postura_detalle (id)
	ON UPDATE RESTRICT ON DELETE RESTRICT;

/* Add Foreign Key: fk_salida_detalle_postura_salida_detalle */
ALTER TABLE salida_detalle_postura ADD CONSTRAINT fk_salida_detalle_postura_salida_detalle
	FOREIGN KEY (salida_detalle_id) REFERENCES salida_detalle_incubadora (id)
	ON UPDATE RESTRICT ON DELETE RESTRICT;

/* Add Foreign Key: fk_salida_incubadora_empleado */
ALTER TABLE salida_incubadora ADD CONSTRAINT fk_salida_incubadora_empleado
	FOREIGN KEY (empleado_id) REFERENCES empleado (id)
	ON UPDATE RESTRICT ON DELETE RESTRICT;

/* Add Foreign Key: fk_salida_incubadora_incubadora */
ALTER TABLE salida_incubadora ADD CONSTRAINT fk_salida_incubadora_incubadora
	FOREIGN KEY (incubadora_id) REFERENCES incubadora (id)
	ON UPDATE RESTRICT ON DELETE RESTRICT;

/* Add Foreign Key: fk_salida_insumo_empleado */
ALTER TABLE salida_insumo ADD CONSTRAINT fk_salida_insumo_empleado
	FOREIGN KEY (empleado_id_salida) REFERENCES empleado (id)
	ON UPDATE NO ACTION ON DELETE NO ACTION;

/* Add Foreign Key: fk_salida_insumo_empleado_2 */
ALTER TABLE salida_insumo ADD CONSTRAINT fk_salida_insumo_empleado_2
	FOREIGN KEY (empleado_id_recepcion) REFERENCES empleado (id)
	ON UPDATE RESTRICT ON DELETE RESTRICT;

/* Add Foreign Key: fk_salida_insumo_requisicion */
ALTER TABLE salida_insumo ADD CONSTRAINT fk_salida_insumo_requisicion
	FOREIGN KEY (requisicion_id) REFERENCES requisicion (id)
	ON UPDATE RESTRICT ON DELETE RESTRICT;

/* Add Foreign Key: fk_salida_insumo_detalle_insumo */
ALTER TABLE salida_insumo_detalle ADD CONSTRAINT fk_salida_insumo_detalle_insumo
	FOREIGN KEY (insumo_id) REFERENCES bodega (id)
	ON UPDATE RESTRICT ON DELETE RESTRICT;

/* Add Foreign Key: fk_salida_insumo_detalle_salida_insumo */
ALTER TABLE salida_insumo_detalle ADD CONSTRAINT fk_salida_insumo_detalle_salida_insumo
	FOREIGN KEY (salida_insumo_id) REFERENCES salida_insumo (id)
	ON UPDATE RESTRICT ON DELETE RESTRICT;

/* Add Foreign Key: fk_salida_lote_ambiente_historial_lote */
ALTER TABLE salida_lote ADD CONSTRAINT fk_salida_lote_ambiente_historial_lote
	FOREIGN KEY (ambiente_historial_lote_id) REFERENCES ambiente_historial_lote (id)
	ON UPDATE RESTRICT ON DELETE RESTRICT;

/* Add Foreign Key: fk_salida_lote_empleado */
ALTER TABLE salida_lote ADD CONSTRAINT fk_salida_lote_empleado
	FOREIGN KEY (empleado_id) REFERENCES empleado (id)
	ON UPDATE RESTRICT ON DELETE RESTRICT;

/* Add Foreign Key: fk_salida_lote_razon_salida */
ALTER TABLE salida_lote ADD CONSTRAINT fk_salida_lote_razon_salida
	FOREIGN KEY (razon_salida_id) REFERENCES razon_salida (id)
	ON UPDATE RESTRICT ON DELETE RESTRICT;

/* Add Foreign Key: fk_usuarios_credenciales_credenciales */
ALTER TABLE usuario_credencial ADD CONSTRAINT fk_usuarios_credenciales_credenciales
	FOREIGN KEY (credencial_id) REFERENCES credencial (id)
	ON UPDATE CASCADE ON DELETE CASCADE;

/* Add Foreign Key: fk_usuarios_credenciales_usuarios */
ALTER TABLE usuario_credencial ADD CONSTRAINT fk_usuarios_credenciales_usuarios
	FOREIGN KEY (usuario_id) REFERENCES usuario (id)
	ON UPDATE CASCADE ON DELETE CASCADE;